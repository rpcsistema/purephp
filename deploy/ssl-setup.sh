#!/bin/bash

# Script de Configura√ß√£o SSL - SaaS White Label
# Configura SSL/HTTPS com Let's Encrypt

set -e

# Vari√°veis (CONFIGURE ANTES DE EXECUTAR)
DOMAIN="seu-dominio.com"
EMAIL="seu-email@gmail.com"
WILDCARD_DOMAIN="*.seu-dominio.com"

echo "üîí Configurando SSL para SaaS Multi-tenant..."

# Verificar se o Certbot est√° instalado
if ! command -v certbot &> /dev/null; then
    echo "‚ùå Certbot n√£o encontrado. Execute primeiro o server-setup.sh"
    exit 1
fi

# Verificar se o Nginx est√° rodando
if ! systemctl is-active --quiet nginx; then
    echo "‚ùå Nginx n√£o est√° rodando. Iniciando..."
    sudo systemctl start nginx
fi

# Fun√ß√£o para configurar SSL para dom√≠nio principal
setup_main_domain() {
    echo "üåê Configurando SSL para dom√≠nio principal: $DOMAIN"
    
    # Obter certificado SSL
    sudo certbot --nginx \
        -d $DOMAIN \
        -d www.$DOMAIN \
        --email $EMAIL \
        --agree-tos \
        --no-eff-email \
        --redirect \
        --non-interactive
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ SSL configurado com sucesso para $DOMAIN"
    else
        echo "‚ùå Erro ao configurar SSL para $DOMAIN"
        exit 1
    fi
}

# Fun√ß√£o para configurar SSL wildcard (requer DNS challenge)
setup_wildcard_ssl() {
    echo "üåü Configurando SSL Wildcard para subdom√≠nios..."
    echo "‚ö†Ô∏è  ATEN√á√ÉO: SSL Wildcard requer valida√ß√£o DNS manual"
    echo "    Voc√™ precisar√° adicionar um registro TXT no seu DNS"
    
    read -p "Deseja continuar com SSL Wildcard? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        sudo certbot certonly \
            --manual \
            --preferred-challenges dns \
            -d $DOMAIN \
            -d $WILDCARD_DOMAIN \
            --email $EMAIL \
            --agree-tos \
            --no-eff-email
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ Certificado wildcard obtido com sucesso"
            echo "üìù Agora voc√™ precisa atualizar a configura√ß√£o do Nginx"
        else
            echo "‚ùå Erro ao obter certificado wildcard"
        fi
    else
        echo "‚è≠Ô∏è  Pulando configura√ß√£o de SSL Wildcard"
    fi
}

# Fun√ß√£o para configurar renova√ß√£o autom√°tica
setup_auto_renewal() {
    echo "üîÑ Configurando renova√ß√£o autom√°tica..."
    
    # Adicionar cron job para renova√ß√£o
    (crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet --nginx") | crontab -
    
    # Testar renova√ß√£o
    sudo certbot renew --dry-run
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Renova√ß√£o autom√°tica configurada com sucesso"
    else
        echo "‚ö†Ô∏è  Aviso: Pode haver problemas com a renova√ß√£o autom√°tica"
    fi
}

# Fun√ß√£o para configurar headers de seguran√ßa
setup_security_headers() {
    echo "üõ°Ô∏è  Configurando headers de seguran√ßa..."
    
    # Criar configura√ß√£o de seguran√ßa
    sudo tee /etc/nginx/snippets/ssl-security.conf > /dev/null <<EOF
# SSL Security Configuration
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
ssl_prefer_server_ciphers off;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;
ssl_session_tickets off;

# HSTS (HTTP Strict Transport Security)
add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

# Security Headers
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header X-Content-Type-Options "nosniff" always;
add_header Referrer-Policy "no-referrer-when-downgrade" always;
add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

# OCSP Stapling
ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;
EOF

    echo "‚úÖ Headers de seguran√ßa configurados"
}

# Fun√ß√£o para testar SSL
test_ssl() {
    echo "üß™ Testando configura√ß√£o SSL..."
    
    # Testar conectividade HTTPS
    if curl -s -I https://$DOMAIN | grep -q "HTTP/2 200"; then
        echo "‚úÖ HTTPS funcionando corretamente"
    else
        echo "‚ö†Ô∏è  Poss√≠vel problema com HTTPS"
    fi
    
    # Verificar certificado
    echo "üìã Informa√ß√µes do certificado:"
    echo | openssl s_client -servername $DOMAIN -connect $DOMAIN:443 2>/dev/null | openssl x509 -noout -dates
}

# Menu principal
echo "üîí Configura√ß√£o SSL - SaaS White Label"
echo "======================================"
echo "Dom√≠nio configurado: $DOMAIN"
echo "Email: $EMAIL"
echo ""
echo "Op√ß√µes dispon√≠veis:"
echo "1) Configurar SSL b√°sico (dom√≠nio principal)"
echo "2) Configurar SSL Wildcard (subdom√≠nios)"
echo "3) Configurar renova√ß√£o autom√°tica"
echo "4) Configurar headers de seguran√ßa"
echo "5) Testar SSL"
echo "6) Configura√ß√£o completa (todas as op√ß√µes)"
echo ""

read -p "Escolha uma op√ß√£o (1-6): " choice

case $choice in
    1)
        setup_main_domain
        ;;
    2)
        setup_wildcard_ssl
        ;;
    3)
        setup_auto_renewal
        ;;
    4)
        setup_security_headers
        ;;
    5)
        test_ssl
        ;;
    6)
        setup_main_domain
        setup_wildcard_ssl
        setup_auto_renewal
        setup_security_headers
        test_ssl
        ;;
    *)
        echo "‚ùå Op√ß√£o inv√°lida"
        exit 1
        ;;
esac

echo ""
echo "üéâ Configura√ß√£o SSL conclu√≠da!"
echo "üìù Lembre-se de:"
echo "   - Atualizar os DNS para apontar para este servidor"
echo "   - Configurar o arquivo .env com os dom√≠nios corretos"
echo "   - Testar a aplica√ß√£o em https://$DOMAIN"